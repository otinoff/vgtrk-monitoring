"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
"""

import streamlit as st
import pandas as pd
from datetime import datetime
from typing import List, Dict

def show_monitoring_results_cards(results: List[Dict], filials: List[Dict], queries: List[Dict]):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤
    
    Args:
        results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –ë–î
        filials: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤
        queries: –°–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
    results_by_filial = {}
    for result in results:
        filial_id = result.get('filial_id')
        if filial_id not in results_by_filial:
            results_by_filial[filial_id] = []
        results_by_filial[filial_id].append(result)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    filials_dict = {f['id']: f for f in filials}
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–í—Å–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–æ–≤", len(filials))
    with col2:
        found_count = len([f for f in filials if f['id'] in results_by_filial and 
                          any(r['status'] == 'success' for r in results_by_filial[f['id']])])
        st.metric("–ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π", found_count, f"{found_count/len(filials)*100:.0f}%")
    with col3:
        not_found = len(filials) - found_count
        st.metric("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", not_found)
    with col4:
        # –°—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ –º–µ—Ç—Ä–∏–∫
        total_articles = 0
        for r in results:
            if r.get('status') == 'success':
                metrics = r.get('metrics')
                if isinstance(metrics, dict) and 'articles_found' in metrics:
                    total_articles += metrics.get('articles_found', 0)
        st.metric("–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π", total_articles)
    
    st.markdown("---")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col_filter1, col_filter2, col_filter3 = st.columns(3)
    with col_filter1:
        filter_status = st.selectbox(
            "–ü–æ–∫–∞–∑–∞—Ç—å",
            ["–í—Å–µ", "–¢–æ–ª—å–∫–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏", "–¢–æ–ª—å–∫–æ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"],
            help="–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        )
    with col_filter2:
        selected_query = st.selectbox(
            "–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ",
            ["–í—Å–µ"] + [q['query_text'] for q in queries],
            help="–§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"
        )
    with col_filter3:
        sort_by = st.selectbox(
            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
            ["–ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É", "–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç–∞—Ç–µ–π", "–ü–æ –æ–∫—Ä—É–≥–∞–º"],
            help="–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫"
        )
    
    st.markdown("---")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_filials = []
    for filial in filials:
        filial_results = results_by_filial.get(filial['id'], [])
        success_results = [r for r in filial_results if r['status'] == 'success']
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if filter_status == "–¢–æ–ª—å–∫–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏" and not success_results:
            continue
        elif filter_status == "–¢–æ–ª—å–∫–æ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" and success_results:
            continue
        
        if selected_query != "–í—Å–µ":
            filtered_results = [r for r in success_results 
                              if any(q['query_text'] == selected_query for q in queries if q['id'] == r.get('search_query_id'))]
            if not filtered_results and filter_status == "–¢–æ–ª—å–∫–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏":
                continue
            success_results = filtered_results
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π
        articles_count = 0
        all_filial_results = filial_results  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–µ —Ç–æ–ª—å–∫–æ success
        
        for r in all_filial_results:
            if r.get('search_mode') in ['sitemap', 'sitemap_no_ai']:
                metrics = r.get('metrics')
                if isinstance(metrics, dict) and 'articles_found' in metrics:
                    articles_count += metrics.get('articles_found', 0)
        
        display_filials.append({
            'filial': filial,
            'results': filial_results,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            'articles_count': articles_count,
            'has_results': bool(success_results)
        })
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort_by == "–ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É":
        display_filials.sort(key=lambda x: x['filial']['name'])
    elif sort_by == "–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç–∞—Ç–µ–π":
        display_filials.sort(key=lambda x: x['articles_count'], reverse=True)
    elif sort_by == "–ü–æ –æ–∫—Ä—É–≥–∞–º":
        display_filials.sort(key=lambda x: (x['filial'].get('federal_district', ''), x['filial']['name']))
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–æ 3 –≤ —Ä—è–¥)
    for i in range(0, len(display_filials), 3):
        cols = st.columns(3)
        for j in range(3):
            if i + j < len(display_filials):
                with cols[j]:
                    display_filial_card(display_filials[i + j], queries)


def display_filial_card(filial_data: Dict, queries: List[Dict]):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
    """
    filial = filial_data['filial']
    results = filial_data['results']
    has_results = filial_data['has_results']
    articles_count = filial_data['articles_count']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
    if has_results:
        card_color = "#d4edda"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        border_color = "#28a745"  # –ó–µ–ª–µ–Ω—ã–π
        icon = "‚úÖ"
    else:
        card_color = "#f8d7da"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
        border_color = "#dc3545"  # –ö—Ä–∞—Å–Ω—ã–π
        icon = "‚ùå"
    
    # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    card_html = f"""
    <div style="
        background-color: {card_color};
        border: 2px solid {border_color};
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
        min-height: 200px;
    ">
        <h4 style="margin: 0 0 10px 0; color: #333;">
            {icon} {filial['name']}
        </h4>
        <p style="margin: 5px 0; font-size: 0.9em; color: #666;">
            {filial.get('federal_district', '–û–∫—Ä—É–≥ –Ω–µ —É–∫–∞–∑–∞–Ω')} | {filial.get('region', '–†–µ–≥–∏–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω')}
        </p>
    """
    
    if filial.get('website_url') or filial.get('website'):
        website = filial.get('website_url') or filial.get('website')
        if not website.startswith('http'):
            website = f"https://{website}"
        card_html += f'<p style="margin: 5px 0; font-size: 0.85em;"><a href="{website}" target="_blank">üåê {website}</a></p>'
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–≤—Å–µ–≥–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç articles_count)
    results_by_keyword = {}
    for result in results:
        query_id = result.get('search_query_id')
        query_text = next((q['query_text'] for q in queries if q['id'] == query_id), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if query_text not in results_by_keyword:
            results_by_keyword[query_text] = []
        results_by_keyword[query_text].append(result)
    
    if articles_count > 0:
        card_html += f'<p style="margin: 10px 0; font-weight: bold; color: #28a745;">–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {articles_count}</p>'
        
        card_html += '<div style="margin-top: 10px;">'
        for keyword, keyword_results in results_by_keyword.items():
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
            all_articles = []
            
            for res in keyword_results:
                if res.get('search_mode') in ['sitemap', 'sitemap_no_ai'] and res.get('articles'):
                    all_articles.extend(res.get('articles', []))
            
            card_html += f'<p style="margin: 8px 0; font-weight: bold; color: #555;">üìå {keyword}:</p>'
            
            if all_articles:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å—Ç–∞—Ç—å–∏ –ø—Ä—è–º–æ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
                card_html += '<div style="margin-left: 20px; font-size: 0.85em;">'
                for i, article in enumerate(all_articles[:2], 1):
                    title = article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    url = article.get('url', '#')
                    date = article.get('date', '')
                    snippet = article.get('snippet', '')
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
                    if hasattr(date, 'strftime'):
                        date_str = date.strftime('%d.%m.%Y')
                    else:
                        date_str = str(date) if date else '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                    
                    # –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
                    card_html += f'''
                    <div style="margin: 8px 0; background-color: #f8f9fa; padding: 8px; border-radius: 5px;">
                        <div style="margin-bottom: 4px;">
                            {i}. <a href="{url}" target="_blank" style="color: #0066cc; text-decoration: none; font-weight: bold;">
                                {title}
                            </a>
                        </div>
                        <div style="color: #999; font-size: 0.9em; margin-bottom: 4px;">
                            üìÖ {date_str}
                        </div>
                    '''
                    
                    # –£–±–∏—Ä–∞–µ–º –ø–æ–∫–∞–∑ snippet –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    
                    card_html += '</div>'
                
                if len(all_articles) > 2:
                    card_html += f'<p style="margin: 4px 0; color: #666; font-style: italic;">... –∏ –µ—â–µ {len(all_articles) - 2} —Å—Ç–∞—Ç–µ–π</p>'
                card_html += '</div>'
            else:
                # –ï—Å–ª–∏ —Å—Ç–∞—Ç–µ–π –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                total_articles = 0
                for res in keyword_results:
                    if res.get('search_mode') in ['sitemap', 'sitemap_no_ai']:
                        metrics = res.get('metrics')
                        if isinstance(metrics, dict) and 'articles_found' in metrics:
                            total_articles += metrics.get('articles_found', 0)
                
                if total_articles > 0:
                    card_html += f'<p style="margin: 5px 0 10px 20px; font-size: 0.85em; color: #28a745;">‚úì –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {total_articles}</p>'
                else:
                    # –£–±–∏—Ä–∞–µ–º –ø–æ–∫–∞–∑ –∞–Ω–∞–ª–∏–∑–∞ GigaChat –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    card_html += f'<p style="margin: 5px 0 10px 20px; font-size: 0.85em; color: #dc3545;">‚úó –°—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>'
        
        card_html += '</div>'
    else:
        # –ï—Å–ª–∏ articles_count = 0, –Ω–æ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        if results_by_keyword:
            card_html += '<div style="margin-top: 10px;">'
            for keyword, keyword_results in results_by_keyword.items():
                card_html += f'<p style="margin: 8px 0; font-weight: bold; color: #555;">üìå {keyword}:</p>'
                
                # –£–±–∏—Ä–∞–µ–º –ø–æ–∫–∞–∑ –∞–Ω–∞–ª–∏–∑–∞ GigaChat –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                card_html += f'<p style="margin: 5px 0 10px 20px; font-size: 0.85em; color: #dc3545;">‚úó –°—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>'
            card_html += '</div>'
        else:
            card_html += '<p style="margin: 10px 0; color: #666; font-style: italic;">–£–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>'
    
    card_html += '</div>'
    
    st.markdown(card_html, unsafe_allow_html=True)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å—Ç–∞—Ç–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
    has_articles_details = any(
        res.get('articles')
        for results_list in results_by_keyword.values()
        for res in results_list
        if res.get('search_mode') in ['sitemap', 'sitemap_no_ai']
    ) if results_by_keyword else False
    
    if has_articles_details:
        if st.button(f"üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç–∞—Ç—å–∏", key=f"details_{filial['id']}", use_container_width=True):
            with st.expander(f"üì∞ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ - {filial['name']}", expanded=True):
                for keyword, keyword_results in results_by_keyword.items():
                    st.markdown(f"### üîç –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: **{keyword}**")
                    
                    total_articles_for_keyword = 0
                    all_articles_for_keyword = []
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                    for res in keyword_results:
                        if res.get('search_mode') in ['sitemap', 'sitemap_no_ai']:
                            articles = res.get('articles', [])
                            if articles:
                                all_articles_for_keyword.extend(articles)
                                total_articles_for_keyword += len(articles)
                            else:
                                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π, –Ω–æ –µ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                                count = res.get('metrics', {}).get('articles_found', 0)
                                if count > 0:
                                    total_articles_for_keyword += count
                    
                    if all_articles_for_keyword:
                        st.write(f"üìä **–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π:** {len(all_articles_for_keyword)}")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é
                        for i, article in enumerate(all_articles_for_keyword, 1):
                            col1, col2 = st.columns([4, 1])
                            
                            with col1:
                                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ –∫–∞–∫ —Å—Å—ã–ª–∫–∞
                                article_title = article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                                article_url = article.get('url', '#')
                                st.markdown(f"**{i}.** [{article_title}]({article_url})")
                            
                            with col2:
                                # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                                article_date = article.get('date', '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ —ç—Ç–æ datetime –æ–±—ä–µ–∫—Ç
                                if hasattr(article_date, 'strftime'):
                                    date_str = article_date.strftime('%d.%m.%Y')
                                else:
                                    date_str = str(article_date) if article_date else '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                                st.caption(f"üìÖ {date_str}")
                            
                            # –£–±–∏—Ä–∞–µ–º –ø–æ–∫–∞–∑ snippet –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            
                            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å—Ç–∞—Ç—å—è–º–∏
                            if i < len(all_articles_for_keyword):
                                st.divider()
                    
                    elif total_articles_for_keyword > 0:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π, –Ω–æ –Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π
                        st.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {total_articles_for_keyword} (–¥–µ—Ç–∞–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)")
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–Ω–∞–ª–∏–∑ GigaChat
                        # –£–±–∏—Ä–∞–µ–º –ø–æ–∫–∞–∑ –∞–Ω–∞–ª–∏–∑–∞ GigaChat –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        st.warning(f"‚ùå –°—Ç–∞—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    st.markdown("---")


def show_results_summary(results: List[Dict], filials: List[Dict], queries: List[Dict]):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    """
    with st.expander("üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", expanded=False):
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        data = []
        for filial in filials:
            filial_results = [r for r in results if r['filial_id'] == filial['id']]
            for query in queries:
                query_results = [r for r in filial_results if r.get('search_query_id') == query['id']]
                success_results = [r for r in query_results if r['status'] == 'success']
                articles_count = 0
                for r in success_results:
                    metrics = r.get('metrics')
                    if isinstance(metrics, dict) and 'articles_found' in metrics:
                        articles_count += metrics.get('articles_found', 0)
                
                data.append({
                    '–§–∏–ª–∏–∞–ª': filial['name'],
                    '–û–∫—Ä—É–≥': filial.get('federal_district', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    '–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ': query['query_text'],
                    '–ù–∞–π–¥–µ–Ω–æ': '‚úÖ' if success_results else '‚ùå',
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π': articles_count
                })
        
        df = pd.DataFrame(data)
        
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        pivot = df.pivot_table(
            index='–§–∏–ª–∏–∞–ª',
            columns='–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ',
            values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π',
            aggfunc='sum',
            fill_value=0
        )
        
        st.dataframe(pivot, use_container_width=True)
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", key="export_summary"):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —ç–∫—Å–ø–æ—Ä—Ç–∞
            st.info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")


class ResultsCardsDisplay:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫
    """
    
    def __init__(self, results: List[Dict]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ –ë–î
        """
        self.results = results
        self._prepare_data()
    
    def _prepare_data(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã –∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.filials = {}
        self.queries = {}
        
        for result in self.results:
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª–∏–∞–ª–∞—Ö
            filial_id = result.get('filial_id')
            if filial_id and filial_id not in self.filials:
                self.filials[filial_id] = {
                    'id': filial_id,
                    'name': result.get('filial_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª'),
                    'federal_district': result.get('federal_district', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    'region': result.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    'website': result.get('url', '')
                }
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
            query_id = result.get('search_query_id')
            if query_id and query_id not in self.queries:
                self.queries[query_id] = {
                    'id': query_id,
                    'query_text': result.get('query_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
                }
    
    def display_cards(self):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ —Å–ø–∏—Å–∫–∏
        filials_list = list(self.filials.values())
        queries_list = list(self.queries.values())
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        show_monitoring_results_cards(self.results, filials_list, queries_list)