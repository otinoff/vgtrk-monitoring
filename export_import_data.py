#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å—Ä–µ–¥–∞–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–∞–∫—à–Ω–∞
"""

import sys
import os
import sqlite3
import json
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

from modules.database import VGTRKDatabase


def export_data(db_path: str, export_file: str):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
    
    Args:
        db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        export_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ {db_path}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    
    try:
        export_data = {}
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª–∏–∞–ª—ã
        cursor = conn.execute('SELECT * FROM filials ORDER BY federal_district, name')
        filials = [dict(row) for row in cursor.fetchall()]
        export_data['filials'] = filials
        print(f"   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(filials)} —Ñ–∏–ª–∏–∞–ª–æ–≤")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        cursor = conn.execute('SELECT * FROM search_queries ORDER BY priority DESC, query_text')
        queries = [dict(row) for row in cursor.fetchall()]
        export_data['search_queries'] = queries
        print(f"   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(queries)} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
        cursor = conn.execute('SELECT * FROM monitoring_sessions ORDER BY started_at DESC LIMIT 50')
        sessions = [dict(row) for row in cursor.fetchall()]
        export_data['monitoring_sessions'] = sessions
        print(f"   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(sessions)} —Å–µ—Å—Å–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(export_file, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"   üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {export_file}")
        print(f"   üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(export_file) / 1024:.1f} –ö–ë")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        raise
    finally:
        conn.close()


def import_data(db_path: str, import_file: str, clear_existing: bool = False):
    """
    –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        import_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        clear_existing: –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
    """
    print(f"üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ {db_path} –∏–∑ {import_file}")
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    with open(import_file, 'r', encoding='utf-8') as f:
        import_data = json.load(f)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path)
    
    try:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        conn.execute('BEGIN TRANSACTION')
        
        if clear_existing:
            print("   üßπ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
            conn.execute('DELETE FROM monitoring_results')
            conn.execute('DELETE FROM monitoring_sessions')
            conn.execute('DELETE FROM search_queries')
            conn.execute('DELETE FROM filials')
            conn.commit()
            print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª–∏–∞–ª—ã
        if 'filials' in import_data:
            filials = import_data['filials']
            print(f"   üì• –ò–º–ø–æ—Ä—Ç {len(filials)} —Ñ–∏–ª–∏–∞–ª–æ–≤...")
            
            for filial in filials:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
                filial_data = {k: v for k, v in filial.items() 
                              if k in ['name', 'region', 'city', 'website', 'federal_district', 
                                      'all_sites', 'is_active', 'sitemap_url']}
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if 'is_active' not in filial_data:
                    filial_data['is_active'] = 1
                if 'sitemap_url' not in filial_data:
                    filial_data['sitemap_url'] = None
                
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π
                fields = list(filial_data.keys())
                placeholders = ', '.join(['?' for _ in fields])
                values = [filial_data[field] for field in fields]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
                sql = f'''
                    INSERT OR REPLACE INTO filials ({', '.join(fields)})
                    VALUES ({placeholders})
                '''
                
                conn.execute(sql, values)
            
            conn.commit()
            print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(filials)} —Ñ–∏–ª–∏–∞–ª–æ–≤")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if 'search_queries' in import_data:
            queries = import_data['search_queries']
            print(f"   üì• –ò–º–ø–æ—Ä—Ç {len(queries)} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
            
            for query in queries:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
                query_data = {k: v for k, v in query.items() 
                             if k in ['query_text', 'category', 'description', 'priority', 'is_active']}
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if 'is_active' not in query_data:
                    query_data['is_active'] = 1
                if 'priority' not in query_data:
                    query_data['priority'] = 1
                
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π
                fields = list(query_data.keys())
                placeholders = ', '.join(['?' for _ in fields])
                values = [query_data[field] for field in fields]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
                sql = f'''
                    INSERT OR REPLACE INTO search_queries ({', '.join(fields)})
                    VALUES ({placeholders})
                '''
                
                conn.execute(sql, values)
            
            conn.commit()
            print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(queries)} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if 'monitoring_sessions' in import_data:
            sessions = import_data['monitoring_sessions']
            print(f"   üì• –ò–º–ø–æ—Ä—Ç {len(sessions)} —Å–µ—Å—Å–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            
            for session in sessions:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
                session_data = {k: v for k, v in session.items() 
                               if k in ['session_name', 'search_mode', 'search_period', 'search_date', 
                                       'filials_count', 'queries_count', 'results_count', 'status', 
                                       'started_at', 'completed_at', 'duration_seconds', 'error_message']}
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if 'status' not in session_data:
                    session_data['status'] = 'completed'
                if 'filials_count' not in session_data:
                    session_data['filials_count'] = 0
                if 'queries_count' not in session_data:
                    session_data['queries_count'] = 0
                if 'results_count' not in session_data:
                    session_data['results_count'] = 0
                
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π
                fields = list(session_data.keys())
                placeholders = ', '.join(['?' for _ in fields])
                values = [session_data[field] for field in fields]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
                sql = f'''
                    INSERT OR IGNORE INTO monitoring_sessions ({', '.join(fields)})
                    VALUES ({placeholders})
                '''
                
                conn.execute(sql, values)
            
            conn.commit()
            print(f"   ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(sessions)} —Å–µ—Å—Å–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        conn.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
        raise
    finally:
        conn.close()


def show_database_info(db_path: str):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    
    try:
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        cursor = conn.execute('SELECT COUNT(*) as total FROM filials')
        filials_count = cursor.fetchone()[0]
        print(f"   üè¢ –§–∏–ª–∏–∞–ª–æ–≤: {filials_count}")
        
        cursor = conn.execute('SELECT COUNT(*) as total FROM search_queries')
        queries_count = cursor.fetchone()[0]
        print(f"   üîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {queries_count}")
        
        cursor = conn.execute('SELECT COUNT(*) as total FROM monitoring_sessions')
        sessions_count = cursor.fetchone()[0]
        print(f"   üìä –°–µ—Å—Å–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {sessions_count}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ–∫—Ä—É–≥–∞–º
        print("\n   üåç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–∞–º:")
        cursor = conn.execute('''
            SELECT federal_district, COUNT(*) as count 
            FROM filials 
            GROUP BY federal_district 
            ORDER BY count DESC
        ''')
        for row in cursor.fetchall():
            print(f"      {row[0]}: {row[1]} —Ñ–∏–ª–∏–∞–ª–æ–≤")
        
        # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if os.path.exists(db_path):
            size_mb = os.path.getsize(db_path) / (1024 * 1024)
            print(f"\n   üíæ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {size_mb:.2f} –ú–ë")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    finally:
        conn.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üîÑ –°–ö–†–ò–ü–¢ –≠–ö–°–ü–û–†–¢–ê/–ò–ú–ü–û–†–¢–ê –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print(" python export_import_data.py export [db_path] [export_file]")
        print("  python export_import_data.py import [db_path] [import_file]")
        print("  python export_import_data.py info [db_path]")
        return
    
    command = sys.argv[1]
    
    if command == "export":
        if len(sys.argv) < 4:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python export_import_data.py export [db_path] [export_file]")
            return
        
        db_path = sys.argv[2]
        export_file = sys.argv[3]
        export_data(db_path, export_file)
        
    elif command == "import":
        if len(sys.argv) < 4:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python export_import_data.py import [db_path] [import_file]")
            return
        
        db_path = sys.argv[2]
        import_file = sys.argv[3]
        import_data(db_path, import_file)
        
    elif command == "info":
        if len(sys.argv) < 3:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python export_import_data.py info [db_path]")
            return
        
        db_path = sys.argv[2]
        show_database_info(db_path)
        
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: export, import, info")


if __name__ == "__main__":
    main()