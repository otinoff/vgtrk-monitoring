"""
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import streamlit as st
import asyncio
from datetime import datetime
import time
from modules.async_monitoring import AsyncMonitoring
from modules.database import VGTRKDatabase
from modules.results_formatter import SitemapResultsFormatter
import json


async def process_monitoring_async(
    db: VGTRKDatabase,
    filials: list,
    queries: list,
    search_days: int = 7,
    max_concurrent: int = 20,
    session_id: int = None,
    progress_placeholder=None
):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    start_time = time.time()
    monitor = AsyncMonitoring(max_concurrent=max_concurrent)
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = [q['query_text'] for q in queries]
        
        # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total = len(filials)
        completed = 0
        results_saved = 0
        
        # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        def progress_callback(current, total_count, result):
            nonlocal completed, results_saved
            completed = current
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Streamlit
            if progress_placeholder:
                status_icon = {
                    'success': '‚úÖ',
                    'no_data': '‚ö†Ô∏è', 
                    'error': '‚ùå'
                }.get(result['status'], '‚ùì')
                
                progress_text = f"""
                **–ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{total_count}**
                
                –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {status_icon} {result['filial_name']}
                - –°—Ç–∞—Ç–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(result.get('articles', []))}
                - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result['processing_time']:.2f}—Å
                """
                
                if result.get('error'):
                    progress_text += f"\n- –û—à–∏–±–∫–∞: {result['error']}"
                
                progress_placeholder.markdown(progress_text)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        results = await monitor.process_filials_batch(
            filials,
            keywords,
            days=search_days,
            max_articles=50,
            progress_callback=progress_callback
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
        formatter = SitemapResultsFormatter()
        
        for result in results:
            if result['status'] == 'success' and result['articles']:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                for query in queries:
                    query_text = query['query_text']
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
                    relevant_articles = [
                        article for article in result['articles']
                        if query_text.lower() in ' '.join(article.get('keywords', [])).lower()
                    ]
                    
                    if relevant_articles:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        formatted = formatter.format_sitemap_results(
                            relevant_articles,
                            result['filial_name'],
                            query_text,
                            max_display=10
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                        db_result = {
                            'filial_id': result['filial_id'],
                            'search_query_id': query['id'],
                            'url': result['website'],
                            'page_title': result['filial_name'],
                            'content': formatted['content'],
                            'gigachat_analysis': f"–ù–∞–π–¥–µ–Ω–æ {len(relevant_articles)} —Å—Ç–∞—Ç–µ–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)",
                            'relevance_score': min(len(relevant_articles) / 10, 1.0),
                            'status': 'success',
                            'search_mode': 'sitemap_async',
                            'articles': formatted['articles'],
                            'metrics': {
                                'articles_found': len(relevant_articles),
                                'search_days': search_days,
                                'processing_time': result['processing_time']
                            }
                        }
                        
                        db.save_monitoring_result(result['filial_id'], db_result, session_id)
                        results_saved += 1
            
            elif result['status'] == 'error':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
                db_result = {
                    'filial_id': result['filial_id'],
                    'url': result['website'],
                    'status': 'error',
                    'error_message': result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
                    'search_mode': 'sitemap_async'
                }
                db.save_monitoring_result(result['filial_id'], db_result, session_id)
        
        total_time = time.time() - start_time
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_count = sum(1 for r in results if r['status'] == 'success')
        error_count = sum(1 for r in results if r['status'] == 'error')
        no_data_count = sum(1 for r in results if r['status'] == 'no_data')
        total_articles = sum(len(r.get('articles', [])) for r in results)
        
        return {
            'total_time': total_time,
            'total_filials': total,
            'success_count': success_count,
            'error_count': error_count,
            'no_data_count': no_data_count,
            'total_articles': total_articles,
            'results_saved': results_saved,
            'avg_time_per_filial': total_time / total if total > 0 else 0
        }
        
    finally:
        await monitor.close()


def run_async_monitoring_streamlit(
    db: VGTRKDatabase,
    filials: list,
    queries: list,
    search_days: int = 7,
    max_concurrent: int = 20,
    session_id: int = None,
    progress_placeholder=None
):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑ Streamlit"""
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π event loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        return loop.run_until_complete(
            process_monitoring_async(
                db, filials, queries, search_days,
                max_concurrent, session_id, progress_placeholder
            )
        )
    finally:
        loop.close()


def show_async_settings():
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    
    with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            max_concurrent = st.slider(
                "–ú–∞–∫—Å. –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
                min_value=1,
                max_value=50,
                value=20,
                help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π. –ë–æ–ª—å—à–µ = –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –≤—ã—à–µ –Ω–∞–≥—Ä—É–∑–∫–∞"
            )
        
        with col2:
            timeout = st.slider(
                "–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Å–µ–∫)",
                min_value=10,
                max_value=60,
                value=30,
                help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
            )
        
        st.info(
            f"üí° –ü—Ä–∏ {max_concurrent} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è—Ö, "
            f"100 —Ñ–∏–ª–∏–∞–ª–æ–≤ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –∑–∞ "
            f"{100 / max_concurrent * 2:.0f}-{100 / max_concurrent * 5:.0f} —Å–µ–∫—É–Ω–¥"
        )
        
        return max_concurrent, timeout


def compare_monitoring_modes():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    st.markdown("""
    ### üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    | –ü–∞—Ä–∞–º–µ—Ç—Ä | –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π | –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π |
    |----------|------------|-------------|
    | **–°–∫–æ—Ä–æ—Å—Ç—å** | üêå –ú–µ–¥–ª–µ–Ω–Ω–æ (5-10 —Å–µ–∫/—Ñ–∏–ª–∏–∞–ª) | ‚ö° –ë—ã—Å—Ç—Ä–æ (0.5-2 —Å–µ–∫/—Ñ–∏–ª–∏–∞–ª) |
    | **–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å** | ‚ùå –ù–µ—Ç (–ø–æ –æ—á–µ—Ä–µ–¥–∏) | ‚úÖ –î–∞ (–¥–æ 50 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ) |
    | **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤** | üíö –ù–∏–∑–∫–æ–µ | üü° –°—Ä–µ–¥–Ω–µ–µ |
    | **–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å** | ‚úÖ –í—ã—Å–æ–∫–∞—è | ‚ö†Ô∏è –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ç–∏ |
    | **100 —Ñ–∏–ª–∏–∞–ª–æ–≤** | ~10-15 –º–∏–Ω—É—Ç | ~30-60 —Å–µ–∫—É–Ω–¥ |
    
    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
    - **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º** - –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (>10 —Ñ–∏–ª–∏–∞–ª–æ–≤)
    - **–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º** - –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    """)


if __name__ == "__main__":
    st.set_page_config(
        page_title="–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –í–ì–¢–†–ö",
        page_icon="‚ö°",
        layout="wide"
    )
    
    st.title("‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –í–ì–¢–†–ö")
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    mode = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
        ["üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (–±—ã—Å—Ç—Ä—ã–π)", "üêå –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π)"],
        horizontal=True
    )
    
    if mode == "üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π (–±—ã—Å—Ç—Ä—ã–π)":
        st.success("‚úÖ –í—ã–±—Ä–∞–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ 50 —Ñ–∏–ª–∏–∞–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!")
        max_concurrent, timeout = show_async_settings()
    else:
        st.info("‚ÑπÔ∏è –í—ã–±—Ä–∞–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - —Ñ–∏–ª–∏–∞–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ –æ—á–µ—Ä–µ–¥–∏")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
    with st.expander("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤", expanded=False):
        compare_monitoring_modes()