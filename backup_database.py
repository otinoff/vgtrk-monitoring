#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import shutil
import sqlite3
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

from modules.database import VGTRKDatabase


def create_backup(source_db: str, backup_dir: str = None):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        source_db: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        backup_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é data/backups)
    """
    source_path = Path(source_db)
    
    if not source_path.exists():
        print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_db}")
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    if backup_dir is None:
        backup_dir = source_path.parent / "backups"
    
    backup_path = Path(backup_dir)
    backup_path.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_filename = f"vgtrk_monitoring_backup_{timestamp}.db"
    backup_file = backup_path / backup_filename
    
    try:
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {source_path}")
        print(f"   –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        shutil.copy2(source_path, backup_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        print("   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏...")
        conn = sqlite3.connect(str(backup_file))
        cursor = conn.execute("PRAGMA integrity_check")
        result = cursor.fetchone()
        conn.close()
        
        if result[0] == "ok":
            print("   ‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   üíæ –†–∞–∑–º–µ—Ä: {backup_file.stat().st_size / (1024*1024):.2f} –ú–ë")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {result[0]}")
            # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é –∫–æ–ø–∏—é
            backup_file.unlink()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        # –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
        if backup_file.exists():
            backup_file.unlink()
        return False


def list_backups(backup_dir: str = None):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    
    Args:
        backup_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏
    """
    if backup_dir is None:
        backup_dir = Path("data/backups")
    else:
        backup_dir = Path(backup_dir)
    
    if not backup_dir.exists():
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {backup_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    backup_files = list(backup_dir.glob("vgtrk_monitoring_backup_*.db"))
    
    if not backup_files:
        print("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
        return
    
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ ({len(backup_files)}):")
    print("-" * 80)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    backup_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
    
    for i, backup_file in enumerate(backup_files, 1):
        stat = backup_file.stat()
        size_mb = stat.st_size / (1024 * 1024)
        mod_time = datetime.fromtimestamp(stat.st_mtime)
        
        print(f"{i:2d}. {backup_file.name}")
        print(f"     üìÖ {mod_time.strftime('%Y-%m-%d %H:%M:%S')}  üíæ {size_mb:.2f} –ú–ë")
        print()


def restore_backup(backup_file: str, target_db: str):
    """
    –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    
    Args:
        backup_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        target_db: –ü—É—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    backup_path = Path(backup_file)
    target_path = Path(target_db)
    
    if not backup_path.exists():
        print(f"‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {backup_file}")
        return False
    
    try:
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        print(f"   –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        print(f"   –¶–µ–ª–µ–≤–∞—è –±–∞–∑–∞: {target_path}")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        if target_path.exists():
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_pre_restore")
            pre_restore_backup = target_path.parent / f"backups/vgtrk_monitoring_backup_{timestamp}.db"
            pre_restore_backup.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(target_path, pre_restore_backup)
            print(f"   üì¶ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã: {pre_restore_backup.name}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ —Ü–µ–ª–µ–≤—É—é –±–∞–∑—É
        shutil.copy2(backup_path, target_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã
        print("   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏...")
        conn = sqlite3.connect(str(target_path))
        cursor = conn.execute("PRAGMA integrity_check")
        result = cursor.fetchone()
        conn.close()
        
        if result[0] == "ok":
            print("   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   üíæ –†–∞–∑–º–µ—Ä: {target_path.stat().st_size / (1024*1024):.2f} –ú–ë")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {result[0]}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False


def cleanup_old_backups(backup_dir: str = None, keep_days: int = 30):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    
    Args:
        backup_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏
        keep_days: –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    """
    if backup_dir is None:
        backup_dir = Path("data/backups")
    else:
        backup_dir = Path(backup_dir)
    
    if not backup_dir.exists():
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {backup_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    backup_files = list(backup_dir.glob("vgtrk_monitoring_backup_*.db"))
    
    if not backup_files:
        print("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    backup_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è
    threshold = datetime.now().timestamp() - (keep_days * 24 * 60 * 60)
    
    deleted_count = 0
    for backup_file in backup_files:
        if backup_file.stat().st_mtime < threshold:
            try:
                backup_file.unlink()
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file.name}")
                deleted_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {backup_file.name}: {e}")
    
    if deleted_count > 0:
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
    else:
        print("‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 60)
    print("üì¶ –°–ò–°–¢–ï–ú–ê –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• –í–ì–¢–†–ö")
    print("=" * 60)
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python backup_database.py create [source_db] [backup_dir]")
        print("  python backup_database.py list [backup_dir]")
        print("  python backup_database.py restore [backup_file] [target_db]")
        print("  python backup_database.py cleanup [backup_dir] [keep_days]")
        return
    
    command = sys.argv[1]
    
    if command == "create":
        source_db = sys.argv[2] if len(sys.argv) > 2 else "data/vgtrk_monitoring.db"
        backup_dir = sys.argv[3] if len(sys.argv) > 3 else None
        create_backup(source_db, backup_dir)
        
    elif command == "list":
        backup_dir = sys.argv[2] if len(sys.argv) > 2 else None
        list_backups(backup_dir)
        
    elif command == "restore":
        if len(sys.argv) < 4:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python backup_database.py restore [backup_file] [target_db]")
            return
        
        backup_file = sys.argv[2]
        target_db = sys.argv[3]
        restore_backup(backup_file, target_db)
        
    elif command == "cleanup":
        backup_dir = sys.argv[2] if len(sys.argv) > 2 else None
        keep_days = int(sys.argv[3]) if len(sys.argv) > 3 else 30
        cleanup_old_backups(backup_dir, keep_days)
        
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: create, list, restore, cleanup")


if __name__ == "__main__":
    main()