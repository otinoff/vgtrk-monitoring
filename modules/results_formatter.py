"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Sitemap
"""

import streamlit as st
from typing import List, Dict
from datetime import datetime

class SitemapResultsFormatter:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ Sitemap –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    @staticmethod
    def format_sitemap_results(sitemap_results: List[Dict], filial_name: str, 
                             keyword: str, max_display: int = 10) -> Dict:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ sitemap –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        
        Args:
            sitemap_results: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
            filial_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ–∏—Å–∫–∞
            max_display: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        if not sitemap_results:
            return {
                'content': f"–ü–æ–∏—Å–∫ –ø–æ '{keyword}' –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                'articles': [],
                'total_count': 0
            }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        relevant_articles = [
            article for article in sitemap_results
            if keyword.lower() in ' '.join(article.get('keywords', [])).lower()
        ]
        
        if not relevant_articles:
            return {
                'content': f"–°—Ç–∞—Ç–µ–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                'articles': [],
                'total_count': 0
            }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
        relevant_articles.sort(key=lambda x: x.get('date') or datetime.min, reverse=True)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_articles = []
        for i, article in enumerate(relevant_articles[:max_display]):
            date_str = article['date'].strftime('%d.%m.%Y') if article.get('date') else '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            
            formatted_articles.append({
                'title': article['title'],
                'url': article['url'],
                'date': date_str,
                'keywords_found': article.get('keywords', []),
                'snippet': article.get('snippet', '')
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ë–î
        content = f"–ù–∞–π–¥–µ–Ω–æ {len(relevant_articles)} —Å—Ç–∞—Ç–µ–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º '{keyword}'"
        if len(relevant_articles) > max_display:
            content += f" (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {max_display})"
        
        return {
            'content': content,
            'articles': formatted_articles,
            'total_count': len(relevant_articles)
        }
    
    @staticmethod
    def display_articles_in_expander(articles: List[Dict], filial_name: str, keyword: str):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—å–∏ –≤ —ç–∫—Å–ø–∞–Ω–¥–µ—Ä–µ Streamlit
        
        Args:
            articles: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
            filial_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        """
        if not articles:
            st.info(f"–°—Ç–∞—Ç–µ–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        for i, article in enumerate(articles, 1):
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º
            st.markdown(f"**{i}. [{article['title']}]({article['url']})**")
            
            # –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            col1, col2 = st.columns([1, 3])
            with col1:
                st.caption(f"üìÖ {article['date']}")
            with col2:
                if article['keywords_found']:
                    keywords_str = ", ".join(article['keywords_found'])
                    st.caption(f"üîç –ù–∞–π–¥–µ–Ω–æ: {keywords_str}")
            
            # –§—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞
            if article['snippet']:
                st.text(article['snippet'][:300] + "..." if len(article['snippet']) > 300 else article['snippet'])
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            if i < len(articles):
                st.markdown("---")
    
    @staticmethod
    def create_articles_dataframe(articles: List[Dict]):
        """
        –°–æ–∑–¥–∞–µ—Ç DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        
        Args:
            articles: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
            
        Returns:
            pandas.DataFrame
        """
        import pandas as pd
        
        data = []
        for article in articles:
            data.append({
                '–ó–∞–≥–æ–ª–æ–≤–æ–∫': article['title'],
                'URL': article['url'],
                '–î–∞—Ç–∞': article['date'],
                '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞': ', '.join(article.get('keywords_found', [])),
                '–§—Ä–∞–≥–º–µ–Ω—Ç': article.get('snippet', '')[:200]
            })
        
        return pd.DataFrame(data)
    
    @staticmethod
    def format_for_gigachat(articles: List[Dict], filial_name: str, keyword: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ GigaChat
        
        Args:
            articles: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
            filial_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            
        Returns:
            –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GigaChat
        """
        if not articles:
            return f"–°—Ç–∞—Ç–µ–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º '{keyword}' –Ω–∞ —Å–∞–π—Ç–µ {filial_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        text = f"–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ {filial_name} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{keyword}':\n\n"
        text += f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}\n\n"
        
        for i, article in enumerate(articles[:5], 1):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            text += f"{i}. {article['date']} - {article['title']}\n"
            if article.get('snippet'):
                text += f"   –§—Ä–∞–≥–º–µ–Ω—Ç: {article['snippet'][:150]}...\n"
            text += "\n"
        
        if len(articles) > 5:
            text += f"... –∏ –µ—â–µ {len(articles) - 5} —Å—Ç–∞—Ç–µ–π\n"
        
        return text