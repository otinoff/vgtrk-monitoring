"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤ —Å AgGrid
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å inline-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import streamlit as st
import pandas as pd
import sqlite3
from typing import List, Dict, Any, Optional
from pathlib import Path
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode, DataReturnMode, JsCode


class FilialsTableEditor:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, db_path: str = "data/vgtrk_monitoring.db"):
        self.db_path = db_path
        
    def get_filials_data(self, 
                        search_query: str = "", 
                        district_filter: str = "–í—Å–µ",
                        sitemap_filter: str = "–í—Å–µ") -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        
        conn = sqlite3.connect(self.db_path)
        
        # –ë–∞–∑–æ–≤—ã–π SQL –∑–∞–ø—Ä–æ—Å
        query = """
            SELECT 
                id,
                name,
                federal_district,
                region,
                website_url,
                sitemap_url,
                is_active,
                region_code
            FROM filials
            WHERE 1=1
        """
        params = []
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
        if search_query:
            query += " AND (LOWER(name) LIKE LOWER(?) OR LOWER(region) LIKE LOWER(?))"
            params.extend([f"%{search_query}%", f"%{search_query}%"])
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–∫—Ä—É–≥—É
        if district_filter != "–í—Å–µ":
            query += " AND federal_district = ?"
            params.append(district_filter)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é sitemap
        if sitemap_filter == "–° Sitemap ‚úÖ":
            query += " AND sitemap_url IS NOT NULL AND sitemap_url != ''"
        elif sitemap_filter == "–ë–µ–∑ Sitemap ‚ùå":
            query += " AND (sitemap_url IS NULL OR sitemap_url = '')"
        
        query += " ORDER BY federal_district, name"
        
        df = pd.read_sql_query(query, conn, params=params)
        conn.close()
        
        return df
    
    def update_sitemap_url(self, filial_id: int, new_sitemap_url: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ sitemap URL –¥–ª—è —Ñ–∏–ª–∏–∞–ª–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute(
                "UPDATE filials SET sitemap_url = ? WHERE id = ?",
                (new_sitemap_url if new_sitemap_url else None, filial_id)
            )
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def update_filial_field(self, filial_id: int, field: str, new_value: Any) -> bool:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª—é–±–æ–≥–æ –ø–æ–ª—è —Ñ–∏–ª–∏–∞–ª–∞"""
        try:
            # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
            allowed_fields = ['name', 'federal_district', 'region', 'website_url', 'sitemap_url', 'is_active']
            
            if field not in allowed_fields:
                st.error(f"–ü–æ–ª–µ {field} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            query = f"UPDATE filials SET {field} = ? WHERE id = ?"
            cursor.execute(query, (new_value if new_value else None, filial_id))
            
            conn.commit()
            conn.close()
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è {field}: {e}")
            return False
    
    def format_website_url(self, url: Optional[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL —Å–∞–π—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not url:
            return ""
        
        if not url.startswith(('http://', 'https://')):
            url = f"https://{url}"
        
        return url
    
    def display_interactive_table(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã AgGrid —Å inline-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        st.markdown("### üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞–º–∏ –í–ì–¢–†–ö")
        st.info("""
        üí° **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã:**
        - **‚òëÔ∏è –í—ã–±–æ—Ä —Ñ–∏–ª–∏–∞–ª–æ–≤** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ–∫–±–æ–∫—Å—ã —Å–ª–µ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        - **‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π** - –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –ª—é–±–æ–π —è—á–µ–π–∫–µ (–∫—Ä–æ–º–µ ID)
        - **üìù –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –ø–æ–ª—è:**
          - **–ù–∞–∑–≤–∞–Ω–∏–µ** - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
          - **–û–∫—Ä—É–≥** - –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–≥–æ–≤
          - **–†–µ–≥–∏–æ–Ω** - —Ä–µ–≥–∏–æ–Ω —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
          - **–°–∞–π—Ç** - URL —Å–∞–π—Ç–∞ —Ñ–∏–ª–∏–∞–ª–∞ (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π)
          - **Sitemap URL** - –ø—É—Ç—å –∫ sitemap
        - **üîç –§–∏–ª—å—Ç—Ä—ã** –≤ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–µ (–Ω–∞–≤–µ–¥–∏—Ç–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí –º–µ–Ω—é)
        - **üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞** –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏
        - **‚ÜîÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞** –∫–æ–ª–æ–Ω–æ–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º –≥—Ä–∞–Ω–∏—Ü
        - **üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ** - –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        
        ‚ö° **–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:** –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã —á–µ–∫–±–æ–∫—Å–∞–º–∏ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
        """)
        
        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
        
        with col1:
            search_query = st.text_input(
                "üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª–∏–∞–ª–∞",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–∞...",
                help="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏–ª–∏–∞–ª–∞ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω—É"
            )
        
        with col2:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–∫—Ä—É–≥–æ–≤
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT DISTINCT federal_district FROM filials ORDER BY federal_district")
            districts = [row[0] for row in cursor.fetchall() if row[0]]
            conn.close()
            
            district_filter = st.selectbox(
                "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥",
                ["–í—Å–µ"] + districts
            )
        
        with col3:
            sitemap_filter = st.selectbox(
                "–ù–∞–ª–∏—á–∏–µ Sitemap",
                ["–í—Å–µ", "–° Sitemap ‚úÖ", "–ë–µ–∑ Sitemap ‚ùå"]
            )
        
        with col4:
            st.markdown("<br>", unsafe_allow_html=True)
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True, key="refresh_filters_btn"):
                st.rerun()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = self.get_filials_data(search_query, district_filter, sitemap_filter)
        
        if df.empty:
            st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
            return
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df['–°—Ç–∞—Ç—É—Å'] = df['is_active'].apply(lambda x: '‚úÖ' if x else '‚ùå')
        df['Sitemap'] = df['sitemap_url'].apply(
            lambda x: '‚úÖ' if x and str(x).strip() else '‚ùå'
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col_stat1, col_stat2, col_stat3, col_stat4 = st.columns(4)
        
        with col_stat1:
            st.metric("–í—Å–µ–≥–æ —Ñ–∏–ª–∏–∞–ª–æ–≤", len(df))
        
        with col_stat2:
            active_count = len(df[df['is_active'] == 1])
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", active_count)
        
        with col_stat3:
            with_sitemap = len(df[df['Sitemap'] == '‚úÖ'])
            st.metric("–° Sitemap", with_sitemap)
        
        with col_stat4:
            coverage = (with_sitemap / len(df) * 100) if len(df) > 0 else 0
            st.metric("% –ø–æ–∫—Ä—ã—Ç–∏—è", f"{coverage:.1f}%")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AgGrid
        st.markdown("### üìã –¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–ª–∏–∞–ª–æ–≤")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º DataFrame
        display_df = df.copy()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AgGrid
        gb = GridOptionsBuilder.from_dataframe(display_df)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ
        gb.configure_column("id", header_name="ID", width=60, pinned='left', editable=False)
        
        gb.configure_column("name",
                          header_name="–ù–∞–∑–≤–∞–Ω–∏–µ",
                          width=250,
                          pinned='left',
                          editable=True,
                          cellStyle={'backgroundColor': '#f8f9fa'},
                          cellEditor='agTextCellEditor')
        
        gb.configure_column("federal_district",
                          header_name="–û–∫—Ä—É–≥",
                          width=120,
                          editable=True,
                          cellStyle={'backgroundColor': '#f8f9fa'},
                          cellEditor='agSelectCellEditor',
                          cellEditorParams={
                              'values': ['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π', '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π', '–Æ–∂–Ω—ã–π', '–°–µ–≤–µ—Ä–æ-–ö–∞–≤–∫–∞–∑—Å–∫–∏–π',
                                        '–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π', '–£—Ä–∞–ª—å—Å–∫–∏–π', '–°–∏–±–∏—Ä—Å–∫–∏–π', '–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π']
                          })
        
        gb.configure_column("region",
                          header_name="–†–µ–≥–∏–æ–Ω",
                          width=150,
                          editable=True,
                          cellStyle={'backgroundColor': '#f8f9fa'},
                          cellEditor='agTextCellEditor')
        
        # –î–µ–ª–∞–µ–º —Å–∞–π—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
        gb.configure_column("website_url",
                          header_name="–°–∞–π—Ç",
                          width=200,
                          editable=True,
                          cellStyle={'backgroundColor': '#fff8dc', 'color': '#0068C9', 'cursor': 'pointer'},
                          cellEditor='agTextCellEditor')
        
        # Sitemap URL —Ç–æ–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π
        gb.configure_column("sitemap_url",
                          header_name="Sitemap URL",
                          width=300,
                          editable=True,
                          cellStyle={'backgroundColor': '#f0f8ff'},
                          cellEditor='agTextCellEditor')
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ª–∏—á–∏—è Sitemap
        gb.configure_column("Sitemap",
                          header_name="üì°",
                          width=60,
                          cellStyle=JsCode("""
                              function(params) {
                                  if (params.value === '‚úÖ') {
                                      return {'color': 'green', 'fontWeight': 'bold', 'textAlign': 'center'};
                                  } else {
                                      return {'color': 'red', 'fontWeight': 'bold', 'textAlign': 'center'};
                                  }
                              }
                          """))
        
        gb.configure_column("–°—Ç–∞—Ç—É—Å",
                          header_name="–ê–∫—Ç–∏–≤–µ–Ω",
                          width=80,
                          cellStyle=JsCode("""
                              function(params) {
                                  if (params.value === '‚úÖ') {
                                      return {'color': 'green', 'textAlign': 'center'};
                                  } else {
                                      return {'color': 'gray', 'textAlign': 'center'};
                                  }
                              }
                          """))
        
        # –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        gb.configure_column("is_active", hide=True)
        gb.configure_column("region_code", hide=True)
        
        # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∏–¥–∞
        gb.configure_default_column(
            sortable=True,
            filter=True,
            resizable=True,
            filterable=True,
            groupable=False,
            editable=False
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∫–∏
        gb.configure_grid_options(
            domLayout='normal',
            enableCellTextSelection=True,
            ensureDomOrder=True,
            rowHeight=35,
            headerHeight=40,
            tooltipShowDelay=500,
            suppressRowTransform=True,
            animateRows=False,
            onCellValueChanged=JsCode("""
                function(event) {
                    console.log('Cell value changed:', event);
                }
            """),
            onCellClicked=JsCode("""
                function(event) {
                    if (event.colDef.field === 'website_url' && event.value) {
                        var url = event.value;
                        if (!url.startsWith('http://') && !url.startsWith('https://')) {
                            url = 'https://' + url;
                        }
                        window.open(url, '_blank');
                    }
                }
            """)
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫ - –≤–∫–ª—é—á–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
        gb.configure_selection(
            selection_mode='multiple',  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
            use_checkbox=True,  # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã —Å–ª–µ–≤–∞
            rowMultiSelectWithClick=False,  # –í—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —á–µ–∫–±–æ–∫—Å
            suppressRowDeselection=False,
            pre_selected_rows=None  # –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã –∏ —Å—Ç–∏–ª–µ–π
        custom_css = {
            ".ag-root": {"font-family": "Arial, sans-serif"},
            ".ag-header": {"background-color": "#f0f2f6", "color": "#31333F"},
            ".ag-header-cell": {"font-weight": "bold"},
            ".ag-row-hover": {"background-color": "#f5f7fa"},
            ".ag-cell-focus": {"border": "2px solid #0068C9 !important"},
            ".ag-cell-inline-editing": {"background-color": "#fff3cd !important"}
        }
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        grid_response = AgGrid(
            display_df,
            gridOptions=gb.build(),
            height=500,
            width='100%',
            data_return_mode=DataReturnMode.FILTERED_AND_SORTED,
            update_mode=GridUpdateMode.VALUE_CHANGED,
            fit_columns_on_grid_load=False,
            allow_unsafe_jscode=True,
            enable_enterprise_modules=False,
            custom_css=custom_css,
            theme='streamlit'  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ 'light', 'dark', 'blue', 'fresh', 'material'
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if 'selected_rows' in grid_response and grid_response['selected_rows'] is not None:
            selected_df = pd.DataFrame(grid_response['selected_rows'])
            if not selected_df.empty:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
                selected_filials = selected_df.to_dict('records')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
                st.session_state.selected_filials = selected_filials
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–∞—Ö
                st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Ñ–∏–ª–∏–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(selected_filials)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                with st.expander("üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", expanded=False):
                    for filial in selected_filials:
                        st.write(f"‚Ä¢ **{filial.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}** ({filial.get('region', '')})")
            else:
                st.session_state.selected_filials = []
                st.info("üí° –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª—ã —Å –ø–æ–º–æ—â—å—é —á–µ–∫–±–æ–∫—Å–æ–≤ —Å–ª–µ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, –æ—á–∏—â–∞–µ–º
            if 'selected_filials' not in st.session_state:
                st.session_state.selected_filials = []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π)
        if grid_response['data'] is not None:
            updated_df = pd.DataFrame(grid_response['data'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Å–µ—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö –ø–æ–ª—è—Ö
            for index, row in updated_df.iterrows():
                original_row = df[df['id'] == row['id']]
                if not original_row.empty:
                    original = original_row.iloc[0]
                    updated = False
                    updated_fields = []
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    fields_to_check = ['name', 'federal_district', 'region', 'website_url', 'sitemap_url']
                    
                    for field in fields_to_check:
                        if str(original[field]) != str(row[field]):
                            if self.update_filial_field(row['id'], field, row[field]):
                                updated = True
                                field_name_ru = {
                                    'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
                                    'federal_district': '–û–∫—Ä—É–≥',
                                    'region': '–†–µ–≥–∏–æ–Ω',
                                    'website_url': '–°–∞–π—Ç',
                                    'sitemap_url': 'Sitemap URL'
                                }.get(field, field)
                                updated_fields.append(field_name_ru)
                    
                    # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if updated:
                        fields_str = ', '.join(updated_fields)
                        st.success(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—è ({fields_str}) –¥–ª—è {row['name']}")
                        st.balloons()
                        # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
                        import time
                        time.sleep(1)
                        st.rerun()
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã
        if st.session_state.get('selected_filials'):
            st.markdown("---")
            col_monitor1, col_monitor2 = st.columns([3, 1])
            with col_monitor1:
                st.info(f"üéØ –í—ã–±—Ä–∞–Ω–æ {len(st.session_state.selected_filials)} —Ñ–∏–ª–∏–∞–ª–æ–≤. –ì–æ—Ç–æ–≤—ã –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É!")
            with col_monitor2:
                if st.button("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É", use_container_width=True, type="primary"):
                    st.info("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É 'üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        st.markdown("### üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏—è")
        col_action1, col_action2, col_action3, col_action4 = st.columns(4)
        
        with col_action1:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            csv = df[['name', 'federal_district', 'region', 'website_url', 'sitemap_url']].to_csv(index=False)
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV",
                data=csv,
                file_name=f"filials_sitemap_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                use_container_width=True
            )
        
        with col_action2:
            if st.button("üîç –ù–∞–π—Ç–∏ Sitemap", use_container_width=True, help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ sitemap –¥–ª—è —Ñ–∏–ª–∏–∞–ª–æ–≤ –±–µ–∑ sitemap", key="find_sitemap_btn"):
                filials_without_sitemap = df[df['Sitemap'] == '‚ùå']
                if not filials_without_sitemap.empty:
                    st.info(f"üîç –ü–æ–∏—Å–∫ sitemap –¥–ª—è {len(filials_without_sitemap)} —Ñ–∏–ª–∏–∞–ª–æ–≤...")
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
                else:
                    st.success("‚úÖ –£ –≤—Å–µ—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –µ—Å—Ç—å sitemap!")
        
        with col_action3:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True, key="refresh_table_btn"):
                st.rerun()
        
        with col_action4:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
            theme_options = ['streamlit', 'light', 'dark', 'blue', 'fresh', 'material']
            selected_theme = st.selectbox("üé® –¢–µ–º–∞", theme_options, key="theme_selector")
            if selected_theme != 'streamlit':
                st.info(f"–¢–µ–º–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã")