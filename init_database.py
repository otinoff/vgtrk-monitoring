#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤ –í–ì–¢–†–ö
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

from modules.database import VGTRKDatabase
import pandas as pd


def init_vgtrk_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–º–ø–æ—Ä—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("=" * 60)
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –í–ì–¢–†–ö")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = VGTRKDatabase("data/vgtrk_monitoring.db")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: data/vgtrk_monitoring.db")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª–∏–∞–ª—ã –∏–∑ CSV
    csv_path = Path("../–ì–¢–†–ö/vgtrk_filials_final.csv")
    if not csv_path.exists():
        # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
        csv_path = Path("–ì–¢–†–ö/vgtrk_filials_final.csv")
    
    if csv_path.exists():
        print(f"\nüìÇ –ò–º–ø–æ—Ä—Ç —Ñ–∏–ª–∏–∞–ª–æ–≤ –∏–∑ {csv_path}")
        count = db.import_filials_from_csv(str(csv_path), clear_existing=True)
        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} —Ñ–∏–ª–∏–∞–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–∫—Ä—É–≥–∞–º
        stats = db.get_statistics()
        print("\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–æ–≤ –ø–æ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–∞–º:")
        for district, count in sorted(stats['by_district'].items()):
            print(f"   {district}: {count} —Ñ–∏–ª–∏–∞–ª–æ–≤")
        print(f"   –ò–¢–û–ì–û: {stats['filials']['total']} —Ñ–∏–ª–∏–∞–ª–æ–≤")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª {csv_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        create_test_data(db)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    print("\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
    add_default_search_queries(db)
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    print("\nüîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    optimize_database(db)
    
    print("\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print("   - filials: –§–∏–ª–∏–∞–ª—ã –í–ì–¢–†–ö")
    print("   - search_queries: –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print("   - monitoring_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞")
    print("   - monitoring_logs: –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")
    
    return db


def create_test_data(db: VGTRKDatabase):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"""
    test_filials = [
        {
            'name': '–ì–¢–†–ö "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"',
            'region': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            'city': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
            'website': 'nsktv.ru',
            'federal_district': '–°–§–û'
        },
        {
            'name': '–ì–¢–†–ö "–ö—É–∑–±–∞—Å—Å"',
            'region': '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            'city': '–ö–µ–º–µ—Ä–æ–≤–æ',
            'website': 'vesti42.ru',
            'federal_district': '–°–§–û'
        },
        {
            'name': '–ì–¢–†–ö "–ò—Ä—Ç—ã—à"',
            'region': '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            'city': '–û–º—Å–∫',
            'website': 'vesti-omsk.ru',
            'federal_district': '–°–§–û'
        }
    ]
    
    with db.get_connection() as conn:
        for filial in test_filials:
            conn.execute('''
                INSERT OR REPLACE INTO filials 
                (name, region, city, website, federal_district)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                filial['name'],
                filial['region'],
                filial['city'],
                filial['website'],
                filial['federal_district']
            ))
        conn.commit()
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(test_filials)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∏–ª–∏–∞–ª–æ–≤")


def add_default_search_queries(db: VGTRKDatabase):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    queries = [
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        {
            'query': '–í–ì–¢–†–ö',
            'category': '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π',
            'description': '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≥–æ–ª–æ–≤–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏',
            'priority': 10
        },
        {
            'query': '–ª–∏—Ü–µ–Ω–∑–∏—è –°–ú–ò',
            'category': '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π',
            'description': '–ù–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Ü–µ–Ω–∑–∏–∏',
            'priority': 9
        },
        {
            'query': '–∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä–µ–¥–∞–∫—Ü–∏–∏',
            'category': '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π',
            'description': '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            'priority': 8
        },
        
        # –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã
        {
            'query': '—É–∫–∞–∑ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞',
            'category': '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ',
            'description': '–û—Å–≤–µ—â–µ–Ω–∏–µ —É–∫–∞–∑–æ–≤ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞',
            'priority': 7
        },
        {
            'query': '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –†–æ—Å—Å–∏–∏',
            'category': '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ',
            'description': '–ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞',
            'priority': 7
        },
        {
            'query': '–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
            'category': '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ',
            'description': '–û—Å–≤–µ—â–µ–Ω–∏–µ –Ω–∞—Ü–ø—Ä–æ–µ–∫—Ç–æ–≤',
            'priority': 6
        },
        
        # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã
        {
            'query': '–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä',
            'category': '—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ',
            'description': '–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä–∞',
            'priority': 5
        },
        {
            'query': '–º–µ—Å—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏',
            'category': '—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ',
            'description': '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è',
            'priority': 5
        },
        {
            'query': '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã',
            'category': '—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ',
            'description': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã —Ä–µ–≥–∏–æ–Ω–∞',
            'priority': 4
        }
    ]
    
    added = 0
    for q in queries:
        query_id = db.add_search_query(
            q['query'],
            q['category'],
            q['description'],
            q['priority']
        )
        if query_id:
            added += 1
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    all_queries = db.get_search_queries()
    categories = {}
    for q in all_queries:
        cat = q.get('category', '–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        categories[cat] = categories.get(cat, 0) + 1
    
    print("\n   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤:")
    for cat, count in categories.items():
        print(f"   - {cat}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤")


def optimize_database(db: VGTRKDatabase):
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with db.get_connection() as conn:
        # –í–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SQLite
        conn.execute("PRAGMA journal_mode=WAL")  # Write-Ahead Logging –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        conn.execute("PRAGMA synchronous=NORMAL")  # –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é
        conn.execute("PRAGMA cache_size=10000")  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫—ç—à
        conn.execute("PRAGMA temp_store=MEMORY")  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–∞–º—è—Ç–∏
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        conn.execute("ANALYZE")
        conn.commit()
    
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")


def show_database_info(db: VGTRKDatabase):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "=" * 60)
    print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    stats = db.get_statistics()
    
    print(f"\nüìç –§–∏–ª–∏–∞–ª—ã:")
    print(f"   –í—Å–µ–≥–æ: {stats['filials']['total']}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['filials']['active']}")
    
    print(f"\nüåç –ü–æ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º –æ–∫—Ä—É–≥–∞–º:")
    for district, count in sorted(stats['by_district'].items()):
        bar = "‚ñà" * (count // 2)  # –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        print(f"   {district:4} | {bar} {count}")
    
    # –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    queries = db.get_search_queries()
    print(f"\nüîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(queries)}")
    
    # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_path = Path("data/vgtrk_monitoring.db")
    if db_path.exists():
        size_mb = db_path.stat().st_size / (1024 * 1024)
        print(f"\nüíæ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {size_mb:.2f} –ú–ë")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    db = init_vgtrk_database()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ
    show_database_info(db)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    print("\nüß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - —Ñ–∏–ª–∏–∞–ª—ã –°–§–û:")
    sfo_filials = db.get_filials_by_district("–°–§–û")
    for i, filial in enumerate(sfo_filials[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"   {i}. {filial['name']} - {filial.get('website', '–Ω–µ—Ç —Å–∞–π—Ç–∞')}")
    
    if len(sfo_filials) > 5:
        print(f"   ... –∏ –µ—â–µ {len(sfo_filials) - 5} —Ñ–∏–ª–∏–∞–ª–æ–≤")
    
    print("\n‚ú® –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("üìù –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'streamlit run app.py' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")